#ifndef HASH_MAP_H
#define HASH_MAP_H

#include <stdlib.h>
#include "./utils.h"

typedef struct __HASH_MAP_NODE__ map_node;

struct __HASH_MAP_NODE__
{
  int key;
  void *data;
  map_node *next;
};

struct __HASH_MAP_BUCKET__
{
  map_node *head;
  int capacity;
};

typedef struct __HASH_MAP_BUCKET__ map_bucket;

struct __HASH_MAP__
{
  map_bucket **buckets;
  int map_size;
};

typedef struct __HASH_MAP__ hash_map;

/**
 * @brief Initialise empty hash map
 * 
 * @param map_size
 * @return hash_map* 
 */
hash_map *init_map(int map_size);

/**
 * @brief Insert into hash map
 * 
 * @param map 
 * @param key 
 * @param data 
 */
void insert_into_map(hash_map *map, int key, void *data);

/**
 * @brief Find in hash map
 * 
 * @param map 
 * @param key 
 * @return void* 
 */
void *find_in_map(hash_map *map, int key);

/**
 * @brief Delete node from hash map
 * 
 * @param map 
 * @param key 
 * @return void* 
 */
void *delete_from_map(hash_map *map, int key);

/**
 * @brief Delete complete hash map to free up memory
 * 
 * @param map 
 */
void delete_map(hash_map *map);

/**
 * @brief Get all nodes in hashmap as a linked list
 * 
 * @param map 
 * @return map_node* 
 */
map_node *get_all_map_nodes(hash_map *map);

/**
 * @brief Delete the map nodes list generated by get_all_map_nodes
 * 
 * @param node 
 */
void delete_map_node_list(map_node *node);

#endif